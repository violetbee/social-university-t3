// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    createdAt     DateTime       @default(now())
    name          String?
    surname       String?
    email         String?        @unique
    emailVerified DateTime?
    password      String?
    image         String?
    grade         Int?
    userType      User_TYPE?     @default(STUDENT)
    accounts      Account[]
    sessions      Session[]
    posts         TextTypePost[]
    comments      Comment[]
    likes         Like[]
    events        Event[]
    university    University?    @relation(fields: [universityId], references: [id], onDelete: Cascade)
    universityId  String?
    department    Department?    @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId  String?
    schoolClub    SchoolClub?    @relation(fields: [schoolClubId], references: [id], onDelete: Cascade)
    schoolClubId  String?
    DocTypePost   DocTypePost[]
}

enum User_TYPE {
    STUDENT
    TEACHER
    ADMIN
    MODERATOR
    SCHOOL_CLUB_MEMBER
    SCHOOL_CLUB_REPRESENTETIVE
    EVENT_ORGANIZER
}

model University {
    id                     String                   @id @default(cuid())
    name                   String
    slug                   String                   @unique
    location               String
    logo                   String?
    users                  User[]
    posts                  TextTypePost[]
    events                 Event[]
    departments            UniversityOnDepartment[]
    DocTypePost            DocTypePost[]
    SchoolClub             SchoolClub[]
    SchoolClubOnUniversity SchoolClubOnUniversity[]
}

model Department {
    id            String                   @id @default(cuid())
    createdAt     DateTime                 @default(now()) @db.Timestamp(6)
    name          String
    slug          String                   @unique
    maxClassLevel Int
    users         User[]
    classes       Class[]
    universities  UniversityOnDepartment[]
    docTypePosts  DocTypePost[]
}

model UniversityOnDepartment {
    createdAt    DateTime   @default(now()) @db.Timestamp(6)
    university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
    universityId String
    department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId String

    @@id([universityId, departmentId])
}

model Class {
    id           String        @id @default(cuid())
    name         String
    slug         String        @unique
    level        Int?
    department   Department    @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId String
    docTypePosts DocTypePost[]
}

model Category {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now()) @db.Timestamp(6)
    name      String
    slug      String         @unique
    image     String?
    color     String?
    posts     TextTypePost[]
}

model SchoolClub {
    id                     String                   @id @default(cuid())
    createdAt              DateTime                 @default(now()) @db.Timestamp(6)
    name                   String
    description            String?
    slug                   String                   @unique
    banner                 String?
    rating                 Float?
    comments               Comment[]
    users                  User[]
    events                 Event[]
    SchoolClubOnUniversity SchoolClubOnUniversity[]
    University             University?              @relation(fields: [universityId], references: [id])
    universityId           String?

    @@unique([universityId, slug])
}

model SchoolClubOnUniversity {
    createdAt    DateTime   @default(now()) @db.Timestamp(6)
    university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
    universityId String
    schoolClub   SchoolClub @relation(fields: [schoolClubId], references: [id], onDelete: Cascade)
    schoolClubId String

    @@id([universityId, schoolClubId])
}

model TextTypePost {
    id           String      @id @default(cuid())
    createdAt    DateTime    @default(now()) @db.Timestamp(6)
    slug         String      @unique
    title        String
    content      String
    image        String?
    category     Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments     Comment[]
    categoryId   String?
    userId       String
    likes        Like[]
    tags         String[]
    university   University? @relation(fields: [universityId], references: [id])
    universityId String?
}

model DocTypePost {
    id           String      @id @default(cuid())
    createdAt    DateTime    @default(now()) @db.Timestamp(6)
    slug         String      @unique
    title        String
    content      String
    likes        Like[]
    tags         String[]
    comments     Comment[]
    user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    university   University? @relation(fields: [universityId], references: [id])
    universityId String?
    department   Department? @relation(fields: [departmentId], references: [id])
    departmentId String?
    class        Class?      @relation(fields: [classId], references: [id])
    classId      String?
    files        File[]
}

enum EventForWho {
    ALL
    CLASS_MEMBER
    DEPARTMENT_MEMBER
    UNIVERSITY_MEMBER
    SCHOOL_CLUB_MEMBER
}

model Event {
    id           String      @id @default(cuid())
    createdAt    DateTime    @default(now()) @db.Timestamp(6)
    startDate    DateTime    @db.Timestamp(6)
    endDate      DateTime    @db.Timestamp(6)
    title        String
    price        Float?
    description  String
    image        String?
    slug         String?
    location     String
    forWho       EventForWho @default(ALL)
    user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    eventType    EventType   @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
    eventTypeId  String
    university   University? @relation(fields: [universityId], references: [id])
    universityId String?
    schoolClub   SchoolClub? @relation(fields: [schoolClubId], references: [id])
    schoolClubId String?
}

model EventType {
    id     String  @id @default(cuid())
    name   String
    slug   String?
    events Event[]
}

model File {
    id            String       @id @default(cuid())
    createdAt     DateTime     @default(now())
    name          String
    url           String
    size          Int
    type          String
    docTypePost   DocTypePost? @relation(fields: [docTypePostId], references: [id], onDelete: Cascade)
    docTypePostId String?
}

model Like {
    id            String        @id @default(cuid())
    isLike        Boolean       @default(true)
    post          TextTypePost? @relation(fields: [postId], references: [id], onDelete: Cascade)
    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId        String?
    userId        String
    DocTypePost   DocTypePost?  @relation(fields: [docTypePostId], references: [id], onDelete: Cascade)
    docTypePostId String?
    commentId     String?
    comment       Comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@index([postId, userId])
    @@index([docTypePostId, userId])
    @@index([commentId, userId])
}

model Comment {
    id            String       @id @default(cuid())
    createdAt     DateTime     @default(now())
    content       String
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    post          TextTypePost @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId        String
    postId        String
    DocTypePost   DocTypePost? @relation(fields: [docTypePostId], references: [id])
    docTypePostId String?
    SchoolClub    SchoolClub?  @relation(fields: [schoolClubId], references: [id])
    schoolClubId  String?
    Like          Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
