// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    createdAt     DateTime    @default(now())
    name          String?
    surname       String?
    email         String?     @unique
    emailVerified DateTime?
    password      String?
    image         String?
    userType      User_TYPE?  @default(STUDENT)
    accounts      Account[]
    sessions      Session[]
    post          Post[]
    Comment       Comment[]
    like          Like[]
    event         Event[]
    university    University? @relation(fields: [universityId], references: [id], onDelete: Cascade)
    universityId  String?
    department    Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId  String?
    schoolClub    SchoolClub? @relation(fields: [schoolClubId], references: [id], onDelete: Cascade)
    schoolClubId  String?
    class         Class?      @relation(fields: [classId], references: [id], onDelete: Cascade)
    classId       String?
    classLevel    ClassLevel? @relation(fields: [classLevelId], references: [id], onDelete: Cascade)
    classLevelId  String?
}

enum User_TYPE {
    STUDENT
    TEACHER
    ADMIN
    MODERATOR
    SCHOOL_CLUB_MEMBER
    SCHOOL_CLUB_REPRESENTETIVE
    EVENT_ORGANIZER
}

model University {
    id          String                   @id @default(cuid())
    name        String
    slug        String                   @unique
    location    String
    users       User[]
    posts       Post[]
    events      Event[]
    departments UniversityOnDepartment[]
}

model Department {
    id           String                    @id @default(cuid())
    createdAt    DateTime                  @default(now()) @db.Timestamp(6)
    name         String
    slug         String                    @unique
    users        User[]
    posts        Post[]
    classes      Class[]
    classLevels  DepartmentsOnClassLevel[]
    universities UniversityOnDepartment[]
}

model UniversityOnDepartment {
    createdAt    DateTime   @default(now()) @db.Timestamp(6)
    university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
    universityId String
    department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId String

    @@id([universityId, departmentId])
}

model Class {
    id           String      @id @default(cuid())
    name         String
    slug         String      @unique
    department   Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId String
    posts        Post[]
    users        User[]
    classLevel   ClassLevel? @relation(fields: [classLevelId], references: [id])
    classLevelId String?
}

model ClassLevel {
    id          String                    @id @default(cuid())
    name        String
    slug        String                    @unique
    posts       Post[]
    user        User[]
    departments DepartmentsOnClassLevel[]
    class       Class[]
}

model DepartmentsOnClassLevel {
    createdAt    DateTime   @default(now()) @db.Timestamp(6)
    department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId String
    classLevel   ClassLevel @relation(fields: [classLevelId], references: [id], onDelete: Cascade)
    classLevelId String

    @@id([departmentId, classLevelId])
}

model Category {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @db.Timestamp(6)
    name      String
    slug      String   @unique
    posts     Post[]
}

model SchoolClub {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @db.Timestamp(6)
    name      String
    slug      String   @unique
    users     User[]
    events    Event[]
}

model Post {
    id           String      @id @default(cuid())
    createdAt    DateTime    @default(now()) @db.Timestamp(6)
    title        String
    content      String
    image        String?
    category     Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments     Comment[]
    categoryId   String?
    userId       String
    like         Like[]
    type         POST_TYPE
    files        File[]
    university   University? @relation(fields: [universityId], references: [id])
    universityId String?
    department   Department? @relation(fields: [departmentId], references: [id])
    departmentId String?
    class        Class?      @relation(fields: [classId], references: [id])
    classId      String?
    classLevel   ClassLevel? @relation(fields: [classLevelId], references: [id])
    classLevelId String?
}

model Event {
    id           String      @id @default(cuid())
    createdAt    DateTime    @default(now()) @db.Timestamp(6)
    startDate    DateTime    @db.Timestamp(6)
    endDate      DateTime    @db.Timestamp(6)
    title        String
    price        Float?
    description  String
    image        String?
    location     String
    user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    eventType    EventType   @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
    eventTypeId  String
    university   University? @relation(fields: [universityId], references: [id])
    universityId String?
    schoolClub   SchoolClub? @relation(fields: [schoolClubId], references: [id])
    schoolClubId String?
}

model EventType {
    id     String  @id @default(cuid())
    name   String
    events Event[]
}

model File {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    name      String
    url       String
    size      Int
    type      String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
}

model Like {
    id     String  @id @default(cuid())
    isLike Boolean @default(true)
    post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    userId String

    @@unique([postId, userId])
}

model Comment {
    id      String @id @default(cuid())
    content String
    user    User   @relation(fields: [userId], references: [id])
    post    Post   @relation(fields: [postId], references: [id])
    userId  String
    postId  String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum POST_TYPE {
    TEXT
    DOC
}
