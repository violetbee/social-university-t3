// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    surname       String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
    Comment       Comment[]
    Like          Like[]
}

model Category {
    id    String @id @default(cuid())
    name  String
    posts Post[]
}

model Post {
    id         String    @id @default(cuid())
    title      String
    content    String
    image      String?
    category   Category  @relation(fields: [categoryId], references: [id])
    author     User      @relation(fields: [userId], references: [id])
    comments   Comment[]
    categoryId String
    userId     String
    Like       Like[]
    type       POST_TYPE
}

model Like {
    id     String @id @default(cuid())
    post   Post   @relation(fields: [postId], references: [id])
    user   User   @relation(fields: [userId], references: [id])
    postId String
    userId String

    @@unique([postId, userId])
}

model Comment {
    id      String @id @default(cuid())
    content String
    author  User   @relation(fields: [userId], references: [id])
    post    Post   @relation(fields: [postId], references: [id])
    userId  String
    postId  String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum POST_TYPE {
    TEXT
    DOC
}
